# VCS RTL Simulation Makefrag
#
# This makefrag stores common recipes for building RTL simulators with VCS
#
# Compulsory variables:
#  All those described Makefrag-verilator
#  vcs_wrapper_v: An additional verilog wrapper around the DUT
#  vcs_harness: Additional C++ sources for vcs simulation
#  CLOCK_PERIOD
#  TB := The top level module on which the stop and printf conditions are defined


# The -D_GNU_SOURCE is used only in VCS to placate the compiler under
# compilation of VCS-provided C sources. We include <stdint.h> in the generated
# header which then proceeds the #define _GNU_SOURCE present in the
# aforementioned sources. This should removed once we remove the global
# -include of the generated header.
VCS ?= vcs -full64
override VCS_FLAGS := -quiet -timescale=1ns/1ps +v2k +rad +vcs+initreg+random +vcs+lic+wait \
	-notice -line +lint=all,noVCDE,noONGS,noUI -quiet -debug_acc+pp+dmptf -debug_region+cell+encrypt +no_notifier -cpp $(CXX) \
	-top $(TB) \
	-Mdir=$(GEN_DIR)/$(DRIVER_NAME)-debug.csrc \
	+vc+list \
	-CFLAGS "$(CXXFLAGS) -D_GNU_SOURCE -DVCS -I$(VCS_HOME)/include -I$(GEN_DIR)" \
	-LDFLAGS "$(LDFLAGS)" \
	-sverilog \
	-assert svaext \
	+define+CLOCK_PERIOD=$(CLOCK_PERIOD) \
	+define+RANDOMIZE_GARBAGE_ASSIGN \
	+define+RANDOMIZE_INVALID_ASSIGN \
	+define+STOP_COND=!$(TB).reset \
	+define+PRINTF_COND=!$(TB).reset \
	$(VCS_FLAGS)

vcs_v := $(emul_v) $(vcs_wrapper_v)
vcs_cc := $(emul_cc) $(vcs_harness)

$(OUT_DIR)/$(DRIVER_NAME): $(vcs_v) $(vcs_cc) $(emul_h)
	mkdir -p $(OUT_DIR)
	rm -rf $(GEN_DIR)/$(DRIVER_NAME).csrc
	rm -rf $(OUT_DIR)/$(DRIVER_NAME).daidir
	$(VCS) $(VCS_FLAGS) \
	-o $@ $(vcs_v) $(vcs_cc)

$(OUT_DIR)/$(DRIVER_NAME)-debug: $(vcs_v) $(vcs_cc) $(emul_h)
	mkdir -p $(OUT_DIR)
	rm -rf $(GEN_DIR)/$(DRIVER_NAME)-debug.csrc
	rm -rf $(OUT_DIR)/$(DRIVER_NAME)-debug.daidir
	$(VCS) $(VCS_FLAGS) +define+DEBUG \
	-o $@ $(vcs_v) $(vcs_cc)
