# See LICENSE for license details.

# These point at the main class of the target's Chisel generator
DESIGN_PACKAGE ?= firesim.firesim
DESIGN ?= FireSim
# DESIGN ?= FireBoom

# These guide chisel elaboration of the target design specified above.
# See src/main/scala/SimConfigs.scala
TARGET_CONFIG_PACKAGE ?= firesim.firesim
TARGET_CONFIG ?= FireSimRocketChipConfig
# TARGET_CONFIG ?= FireSimBoomConfig

# These guide chisel elaboration of simulation components by MIDAS, including models and widgets.
# See src/main/scala/SimConfigs.scala
PLATFORM_CONFIG_PACKAGE ?= firesim.firesim
PLATFORM_CONFIG ?= BaseF1Config

name_tuple    := $(DESIGN)-$(TARGET_CONFIG)-$(PLATFORM_CONFIG)
GENERATED_DIR := $(firesim_base_dir)/generated-src/$(PLATFORM)/$(name_tuple)
OUTPUT_DIR    := $(firesim_base_dir)/output/$(PLATFORM)/$(name_tuple)

##################
# RTL Generation #
##################
long_name := $(DESIGN_PACKAGE).$(DESIGN).$(TARGET_CONFIG)
FIRRTL_FILE := $(GENERATED_DIR)/$(long_name).fir
ANNO_FILE := $(GENERATED_DIR)/$(long_name).anno.json

VERILOG := $(GENERATED_DIR)/FPGATop.v
HEADER  := $(GENERATED_DIR)/$(DESIGN)-const.h

common_chisel_args = $(patsubst $(base_dir)/%,%,$(GENERATED_DIR)) $(DESIGN_PACKAGE) $(DESIGN) $(TARGET_CONFIG_PACKAGE) $(TARGET_CONFIG) $(PLATFORM_CONFIG_PACKAGE) $(PLATFORM_CONFIG)

ifdef FIRESIM_STANDALONE
	firesim_sbt_project := {file:${chipyard_dir}}firechip
else
	firesim_sbt_project := firechip
endif

$(FIRRTL_FILE) $(ANNO_FILE): $(SCALA_SOURCES) $(FIRRTL_JAR)
	mkdir -p $(@D)
	cd $(base_dir) && \
	$(SBT) "project $(firesim_sbt_project)" "runMain firesim.firesim.FireSimGenerator $(if $(STROBER),strober,midas) $(common_chisel_args)"

##########################
# Driver Sources & Flags #
##########################

firesim_lib_dir = $(firesim_base_dir)/firesim-lib/src/main/cc
driver_dir = $(firesim_base_dir)/src/main/cc
DRIVER_H = $(shell find $(driver_dir) -name "*.h") \
		   $(shell find $(firesim_lib_dir) -name "*.h")

DRIVER_CC = $(wildcard $(addprefix $(driver_dir)/, $(addsuffix .cc, firesim/*))) \
            $(wildcard $(addprefix $(firesim_lib_dir)/, $(addsuffix .cc, bridges/* fesvr/*)))  \
			$(RISCV)/lib/libfesvr.a

$(info $(DRIVER_CC))
TARGET_CXX_FLAGS := -g -I$(firesim_lib_dir) -I$(driver_dir)/firesim -I$(RISCV)/include
TARGET_LD_FLAGS :=

################################################################
# SW RTL Simulation Args -- for MIDAS- & FPGA-level Simulation #
################################################################
TIMEOUT_CYCLES = 100000000

NET_SLOT ?= 0
NET_LINK_LATENCY ?= 6405
NET_BW ?= 100
NET_SHMEMPORTNAME ?= $(shell printf '%0100d' $(NET_SLOT))
NET_LOOPBACK ?= +nic-loopback0
NET_MACADDR ?= $(shell printf '00:00:00:00:00:%02x' $$(($(NET_SLOT)+2)))
nic_args = +shmemportname0=$(NET_SHMEMPORTNAME) +macaddr0=$(NET_MACADDR) \
	+niclog0=niclog$(NET_SLOT) +linklatency0=$(NET_LINK_LATENCY) \
	+netbw0=$(NET_BW) +netburst0=8 $(NET_LOOPBACK)
tracer_args = +tracefile0=TRACEFILE

SIM_RUNTIME_CONF ?= $(GENERATED_DIR)/$(CONF_NAME)
mem_model_args = $(shell cat $(SIM_RUNTIME_CONF))
COMMON_SIM_ARGS ?= $(mem_model_args) $(nic_args) $(tracer_args)

# Arguments used only at a particular simulation abstraction
MIDAS_LEVEL_SIM_ARGS ?= +dramsim +max-cycles=$(TIMEOUT_CYCLES)
FPGA_LEVEL_SIM_ARGS ?=

################################
# Verilator/VCS/XSIM execution #
################################

verilator = $(GENERATED_DIR)/V$(DESIGN)
verilator_debug = $(GENERATED_DIR)/V$(DESIGN)-debug
verilator_args =
vcs = $(GENERATED_DIR)/$(DESIGN)
vcs_debug = $(GENERATED_DIR)/$(DESIGN)-debug
vcs_args = +vcs+initreg+0 +vcs+initmem+0
xsim = $(GENERATED_DIR)/$(DESIGN)-$(PLATFORM)
sim_binary_basename := $(basename $(notdir $(SIM_BINARY)))

run-verilator: $(verilator)
	cd $(dir $<) && \
	$(verilator) +permissive $(verilator_args) $(COMMON_SIM_ARGS) $(MIDAS_LEVEL_SIM_ARGS) $(EXTRA_SIM_ARGS) +permissive-off $(abspath $(SIM_BINARY)) \
	$(disasm) $(sim_binary_basename).out

run-verilator-debug: $(verilator_debug)
	cd $(dir $<) && \
	$(verilator_debug) +permissive $(verilator_args) +waveform=$(sim_binary_basename).vpd $(COMMON_SIM_ARGS) $(MIDAS_LEVEL_SIM_ARGS) $(EXTRA_SIM_ARGS) +permissive-off $(abspath $(SIM_BINARY)) \
	$(disasm) $(sim_binary_basename).out

run-vcs: $(vcs)
	cd $(dir $<) && \
	$(vcs) +permissive $(vcs_args) $(COMMON_SIM_ARGS) $(MIDAS_LEVEL_SIM_ARGS) $(EXTRA_SIM_ARGS) +permissive-off $(abspath $(SIM_BINARY)) \
	$(disasm) $(sim_binary_basename).out

run-vcs-debug: $(vcs_debug)
	cd $(dir $<) && \
	$(vcs_debug) +permissive $(vcs_args) +waveform=$(sim_binary_basename).vpd $(COMMON_SIM_ARGS) $(MIDAS_LEVEL_SIM_ARGS) $(EXTRA_SIM_ARGS) +permissive-off $(abspath $(SIM_BINARY)) \
	$(disasm) $(sim_binary_basename).out

run-xsim: $(xsim)
	cd $(dir $<) && ./$(notdir $<)  +permissive $(COMMON_SIM_ARGS) $(FPGA_LEVEL_SIM_ARGS) $(EXTRA_SIM_ARGS) \
	+sample=$(notdir $(SIM_BINARY)).sample  +permissive-off $(abspath $(SIM_BINARY))

############################################
# Midas-Level Simulation Execution Recipes #
############################################
# The desired RTL simulator. supported options: {vcs, verilator}
EMUL ?= verilator

# Firechip Tests
fc_test_dir = $(chipyard_dir)/tests
fc_test_srcs = $(wildcard $(fc_test_dir)/*.c)
fc_test_hdrs = $(wildcard $(fc_test_dir)/*.h)

$(fc_test_dir)/%.riscv: $(fc_test_srcs) $(fc_test_hdrs) $(fc_test_dir)/Makefile
	make -C $(fc_test_dir)

ifneq ($(filter run% %.run %.out %.vpd %.vcd,$(MAKECMDGOALS)),)
output_dir := $(OUTPUT_DIR)
-include $(GENERATED_DIR)/$(long_name).d
endif


disasm := 2>
which_disasm := $(shell which spike-dasm 2> /dev/null)
ifneq ($(which_disasm),)
        disasm := 3>&1 1>&2 2>&3 | $(which_disasm) $(DISASM_EXTENSION) >
endif

# Some of the generated suites use specific plus args, that are prefixed with
# the binary name. These are captured with $($*_ARGS)
$(OUTPUT_DIR)/%.run: $(OUTPUT_DIR)/% $(EMUL)
	cd $(dir $($(EMUL))) && \
	./$(notdir $($(EMUL))) $< +sample=$<.sample $($*_ARGS) $($(EMUL)_args) $(COMMON_SIM_ARGS) $(MIDAS_LEVEL_SIM_ARGS) $(EXTRA_SIM_ARGS) \
	2> /dev/null 2> $@ && [ $$PIPESTATUS -eq 0 ]

$(OUTPUT_DIR)/%.out: $(OUTPUT_DIR)/% $(EMUL)
	cd $(dir $($(EMUL))) && \
	./$(notdir $($(EMUL))) $< +sample=$<.sample $($*_ARGS) $($(EMUL)_args) $(COMMON_SIM_ARGS) $(MIDAS_LEVEL_SIM_ARGS) $(EXTRA_SIM_ARGS) \
	$(disasm) $@ && [ $$PIPESTATUS -eq 0 ]

$(OUTPUT_DIR)/%.vpd: $(OUTPUT_DIR)/% $(EMUL)-debug
	cd $(dir $($(EMUL)_debug)) && \
	./$(notdir $($(EMUL)_debug)) $< +sample=$<.sample +waveform=$@ $($*_ARGS) $($(EMUL)_args) $(COMMON_SIM_ARGS) $(MIDAS_LEVEL_SIM_ARGS) $(EXTRA_SIM_ARGS) \
	$(disasm) $(patsubst %.vpd,%.out,$@) && [ $$PIPESTATUS -eq 0 ]

# TraceGen rules

AXE_DIR=$(chipyard_dir)/tools/axe/src
AXE=$(AXE_DIR)/axe

ifdef FIRESIM_STANDALONE
$(AXE): $(wildcard $(AXE_DIR)/*.[ch]) $(AXE_DIR)/make.sh
	cd $(AXE_DIR) && ./make.sh
endif

$(OUTPUT_DIR)/tracegen.out: $($(EMUL))
	mkdir -p $(OUTPUT_DIR) && \
	cd $(dir $($(EMUL))) && \
	./$(notdir $($(EMUL))) +sample=$<.sample $($(EMUL)_args) $(COMMON_SIM_ARGS) $(MIDAS_LEVEL_SIM_ARGS) $(EXTRA_SIM_ARGS) \
	2> /dev/null 2> $@ && [ $$PIPESTATUS -eq 0 ]

$(OUTPUT_DIR)/tracegen.result: $(OUTPUT_DIR)/tracegen.out $(AXE)
	$(chipyard_dir)/scripts/check-tracegen.sh $< > $@

fsim-tracegen: $(OUTPUT_DIR)/tracegen.result

.PHONY: fsim-tracegen
