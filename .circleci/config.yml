# Use the latest 2.1 version of CircleCI pipeline process engine. See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1
orbs:
    aws-cli: circleci/aws-cli@1.0.0
executors:
  main-env:
    docker:
      - image: firesim/firesim-ci:v1.1
        user: "centos"
    environment:
        JVM_MEMORY: 3500M # Default JVM maximum heap limit
        LANG: en_US.UTF-8 # required by sbt when it sees boost directories
        MARSHAL_JLEVEL: 8 # This is unset by default, leading to starvation conditions on the manager
  aws:
    docker:
    - image: cimg/python:2.7-node

commands:
  machinelaunchscript:
    description: "Run firesim's machine launch script"
    steps:
      - run:
          command: |
            cd scripts && /usr/bin/bash ./machine-launch-script.sh

  install-ci-python-reqs:
    description: "Installs python deps for manager-managing CI container"
    steps:
      - run:
          command: |
            pip install -r .circleci/requirements.txt

  buildsetup:
    description: "Run firesim's build-setup.sh"
    steps:
      - run:
          command: |
            ./build-setup.sh fast

  scala-build:
    description: "Compile all relevant Scala sources for CI"
    steps:
      - run:
          command: |
            source env.sh
            make -C sim TARGET_PROJECT=midasexamples sbt SBT_COMMAND=test:compile

  build-scala-doc:
    description: "Compiles Scala Doc"
    steps:
      - run:
          command: |
            source env.sh
            make -C sim scaladoc

  push-scaladoc-to-ghpages:
    description: "Pushes scaladoc to ghphage branch"
    steps:
      # The default SSH key does not have write permissions
      - add_ssh_keys:
          fingerprint:
            - 0e:d9:c3:3b:62:03:7a:da:17:1f:a9:5a:4f:34:50:4c
      - run:
          command: |
            git config --global user.email "biancolin@berkeley.edu"
            git config --global user.name "circleci"
      - when:
          condition: << pipeline.git.tag >>
          steps:
          - run:
              command: |
                source env.sh
                export SBT_GHPAGES_COMMIT_MESSAGE="[ci skip] Update scaladoc for << pipeline.git.tag >> release"
                make -C sim TARGET_PROJECT=midasexamples sbt SBT_COMMAND='set apiDirectory := \"<< pipeline.git.tag >>\"; ghpagesPushSite'
      - unless:
          condition: << pipeline.git.tag >>
          steps:
          - run:
              command: |
                source env.sh
                export SBT_GHPAGES_COMMIT_MESSAGE="[ci skip] Update scaladoc for dev:<< pipeline.git.revision >>"
                make -C sim TARGET_PROJECT=midasexamples sbt SBT_COMMAND="ghpagesPushSite"

  run-scala-test:
    description: "Runs the scala test with name <test-package>.<test-name>"
    parameters:
      target-project:
        type: string
        default: "midasexamples"
      test-name:
        type: string
      test-package:
        type: string
        default: "firesim.midasexamples"
      timeout:
        type: string
        default: "120m"
    steps:
      - run:
          command: |
              .circleci/run-scala-test.py << parameters.target-project >> << parameters.test-package >>.<< parameters.test-name >>
          no_output_timeout: << parameters.timeout >>


  initialize-manager:
    description: "Setups the manager instance and firesim repo"
    parameters:
      max-runtime-hours:
        type: integer
      timeout:
        type: string
        default: "30m"
    steps:
      - run:
          command: |
              .circleci/initialize-manager.py  << parameters.max-runtime-hours >>
          no_output_timeout: << parameters.timeout >>

  # This avoids a race that occurs when multiple cold scala compilations are launched at the same time.
  initial-scala-compile:
    description: "Initial Scala Compilation"
    parameters:
      timeout:
        type: string
        default: "30m"
    steps:
      - run:
          command: |
              .circleci/run-sbt-command.py firesim test:compile
          no_output_timeout: << parameters.timeout >>

  repo-setup:
    description: "Runs all baseline setup tasks up to scala compilation in the CI container."
    steps:
      - checkout
      - machinelaunchscript
      - buildsetup
      - scala-build

  repo-setup-aws:
    description: "Runs all baseline setup to interact with a AWS-hosted manager instance"
    steps:
      - checkout
      - aws-cli/setup
      - install-ci-python-reqs

jobs:
  setup-default-manager:
      executor: aws
      environment:
          TERM: xterm-256color
      steps:
          - repo-setup-aws
          - run:
              name: Print the env
              command: printenv
          - run:
              name: Initialize FireSim manager
              command: |
                  .circleci/launch-manager-instance.py
          - initialize-manager:
              max-runtime-hours: 10
          - initial-scala-compile

  build-default-workloads:
    description: "Invokes marshal to build the default rootfs."
    executor: aws
    steps:
      - repo-setup-aws
      - run:
          command: |
              .circleci/build-default-workloads.py
          no_output_timeout: 30m

  run-manager-pytests:
    executor: aws
    steps:
      - repo-setup-aws
      - run:
          command: .circleci/run-manager-pytests.py

  run-test-groupA:
    executor: aws
    steps:
      - repo-setup-aws
      - run-scala-test:
          test-name: "CIGroupA"

  run-test-groupB:
    executor: aws
    steps:
      - repo-setup-aws
      - run-scala-test:
          test-name: "CIGroupB"

  run-chipyard-tests:
    executor: aws
    steps:
      - repo-setup-aws
      - run-scala-test:
          target-project: "firesim"
          test-package: "firesim.firesim"
          test-name: "CITests"

  run-basic-linux-poweroff:
    executor: aws
    steps:
      - repo-setup-aws
      - run:
          command: |
              .circleci/run-linux-poweroff.py
          no_output_timeout: 30m

  run-ini-api-tests:
    executor: aws
    steps:
      - repo-setup-aws
      - run:
          command: |
              .circleci/run-ini-api-tests.py
          no_output_timeout: 30m

  publish-scala-doc:
    executor: main-env
    steps:
      - repo-setup
      - build-scala-doc
      - push-scaladoc-to-ghpages

  documentation-check:
    executor: main-env
    steps:
      - checkout
      - run:
          name: Check that documentation builds with no warnings/errors
          command: |
            sudo yum update -y
            sudo yum install -y python3-pip make
            sudo pip3 install -r docs/requirements.txt
            make -C docs html

  cull-old-ci-instances:
    executor: aws
    steps:
      - repo-setup-aws
      - run:
          name: Cull Old CI AWS Instances
          command: |
              .circleci/cull-old-ci-instances.py

workflows:
  version: 2

  firesimCIall:
    jobs:
     - documentation-check

     - setup-default-manager

     - build-default-workloads:
         requires:
         - setup-default-manager

     - run-test-groupA:
         requires:
         - setup-default-manager

     - run-test-groupB:
         requires:
         - run-test-groupA

     - run-chipyard-tests:
         requires:
         - run-test-groupB

     - run-manager-pytests:
         requires:
         - setup-default-manager

     - run-fpga-tests-hold:
         type: approval
         requires:
         - build-default-workloads

     - run-basic-linux-poweroff:
         requires:
         - build-default-workloads
         - run-fpga-tests-hold

     - run-ini-api-tests:
         requires:
         - setup-default-manager

     # This uses a CI container, not a manager instance
     - publish-scala-doc:
         filters:
           branches:
             only:
               - dev
           tags:
             only:
               - /[0-9]*\.[0-9]*\.[0-9]*/

  cull-old-ci-instances:
    triggers:
      - schedule:
          cron: "0 0,12 * * *"
          filters:
            branches:
              only:
               - dev
    jobs:
      - cull-old-ci-instances

