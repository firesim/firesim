name: firesim-ci-process

on:
  # run ci when pring to main (note: ci runs on the merge commit of the pr!)
  pull_request:
    branches:
      - main
      - stable

env:
  PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_A_PERSONAL_ACCESS_TOKEN }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  AWS-ACCESS-KEY-ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS-SECRET-ACCESS-KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS-DEFAULT-REGION: ${{ secrets.AWS_DEFAULT_REGION }}
  AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  AZURE_DEFAULT_REGION: ${{ secrets.AZURE_DEFAULT_REGION }}
  AZURE_RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP }}
  AZURE_CI_SUBNET_ID : ${{ secrets.AZURE_CI_SUBNET_ID }}
  AZURE_CI_NSG_ID : ${{ secrets.AZURE_CI_NSG_ID }}
  FIRESIM_PEM: ${{ secrets.FIRESIM_PEM }}
  FIRESIM_PEM_PUBLIC: ${{ secrets.FIRESIM_PEM_PUBLIC }}
  MANAGER_FIRESIM_LOCATION: "~/firesim"
  LANG: "en_US.UTF-8" # required by SBT when it sees boost directories
  LANGUAGE: "en_US:en"
  LC_ALL: "en_US.UTF-8"
  CI_LABEL_DEBUG: ${{ contains(github.event.pull_request.labels.*.name, 'ci:debug') }}

jobs:
  cancel-prior-workflows:
    name: cancel-prior-workflows
    runs-on: ubuntu-20.04
    steps:
      - name: Cancel previous workflow runs
        uses: styfle/cancel-workflow-action@0.9.1
        with:
          access_token: ${{ github.token }}

  # Set up a set of boolean conditions to control which branches of the CI
  # workflow will execute This is based off the conditional job execution
  # example here: https://github.com/dorny/paths-filter#examples
  change-filters:
    name: filter-jobs-on-changes
    runs-on: ubuntu-20.04
    # Queried by downstream jobs to determine if they should run.
    outputs:
      needs-manager: ${{ steps.filter.outputs.all_count != steps.filter.outputs.skip-manager_count }}
      both-conda-reqs-lock-modified: ${{ ((steps.filter.outputs.conda-reqs == 'false') && (steps.filter.outputs.conda-lock == 'false')) || ((steps.filter.outputs.conda-reqs == 'true') && (steps.filter.outputs.conda-lock == 'true')) }}
    steps:
      - uses: actions/checkout@v3
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            all:
              - '**'

            # If any of the files changed match, do a doc build
            docs: &docs-filter
              - 'docs/**'
              - '.readthedocs.yml'

            # If all files match to this filter, skip the main ci pipeline
            skip-manager:
              - *docs-filter
              - '**/*.md'
              - '**/.gitignore'
              - '.github/ISSUE_TEMPLATE/**'

            # If conda requirements was modified ensure the lock file is re-generated
            conda-reqs:
                - 'conda-reqs.yaml'

            # If conda requirements was modified ensure the lock file is re-generated
            conda-lock:
                - 'conda-reqs.conda-lock.yml'

  # Note: This doesn't check if the lock file is synced/faithful to the requirements file.
  # This just ensures that both were modified in the same PR (ideally the lock file was regenerated
  # from the requirements file). This job only runs when that condition is not met and
  # so always fails.
  check-conda-lock-modified:
    name: check-conda-lock-modified
    needs: change-filters
    if: needs.change-filters.outputs.both-conda-reqs-lock-modified == 'false'
    runs-on: ubuntu-20.04
    steps:
      - name: Check conda lock file was regenerated with conda requirements file
        run: |
          echo "ERROR: Either the conda-reqs.yaml or conda-reqs.conda-lock.yml was not updated properly. See the developer docs for more information"
          false

  setup-self-hosted-manager:
    name: setup-self-hosted-manager
    needs: change-filters
    if: needs.change-filters.outputs.needs-manager == 'true'
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - name: Install Python CI requirements
        uses: ./.github/actions/repo-setup-aws
      - name: Launch AWS instance used for the FireSim manager (instance info found here)
        run: ./.github/scripts/launch-manager-instance.py
      - name: Setup N Github Actions Runners on AWS instance
        run: ./.github/scripts/setup-manager-self-hosted.py aws
      - name: Catch potentially orphaned manager
        if: ${{ (env.CI_LABEL_DEBUG != 'true') && (failure() || cancelled()) }}
        uses: ./.github/actions/change-workflow-instance-states
        with:
          new-state: terminate
          github-token: ${{ secrets.GH_A_PERSONAL_ACCESS_TOKEN }}

  setup-manager:
    name: setup-manager
    needs: [setup-self-hosted-manager]
    runs-on: aws-${{ github.run_id }}
    steps:
      - uses: actions/checkout@v3
      - name: Install FireSim pem
        run: ./.github/scripts/install-firesim-pem.py
      - name: Setup FireSim repo (.pem, build-setup.sh, AWS credentials, submodules) and CI daemons
        run: ./.github/scripts/initialize-repo.py
      - name: Run AWS configure
        run: ./.github/scripts/run-aws-configure.py
      - name: Setup Workflow monitor
        if: ${{ (env.CI_LABEL_DEBUG != 'true') }}
        uses: ./.github/actions/setup-workflow-monitor
        with:
          max-runtime-hours: 10
      - name: Initial Scala compilation
        uses: ./.github/actions/initial-scala-compile
      - name: Catch potentially orphaned manager
        if: ${{ (env.CI_LABEL_DEBUG != 'true') && (failure() || cancelled()) }}
        uses: ./.github/actions/change-workflow-instance-states
        with:
          new-state: terminate
          github-token: ${{ secrets.GH_A_PERSONAL_ACCESS_TOKEN }}

  build-default-workloads:
    # Conditionally build rootfs images only if deploying to FPGA to save CI resources
    # https://stackoverflow.com/questions/62325286/run-github-actions-when-pull-requests-have-a-specific-label/62331521#comment122159108_62331521
    if: contains(github.event.pull_request.labels.*.name, 'ci:fpga-deploy')
    name: build-default-workloads
    needs: [setup-manager]
    runs-on: aws-${{ github.run_id }}
    env:
      TERM: xterm-256-color
    steps:
      - uses: actions/checkout@v3
      - name: Build default workloads (FireMarshal and paper workloads)
        run: .github/scripts/build-default-workloads.py

  run-manager-pytests:
    name: run-manager-pytests
    needs: [setup-manager]
    runs-on: aws-${{ github.run_id }}
    env:
      TERM: xterm-256-color
    steps:
      - uses: actions/checkout@v3
      - name: Run pytests
        run: .github/scripts/run-manager-pytests.py

  run-python-typecheck:
    name: run-python-typecheck
    needs: [setup-manager]
    runs-on: aws-${{ github.run_id }}
    env:
      TERM: xterm-256-color
    steps:
      - uses: actions/checkout@v3
      - name: Run mypy type checker
        run: .github/scripts/run-mypy-typechecker.py

  run-scalafmt-check:
    name: run-scalafmt-check
    needs: [setup-manager]
    runs-on: aws-${{ github.run_id }}
    env:
      TERM: xterm-256-color
    steps:
      - uses: actions/checkout@v3
      - name: Run Scalafmt on FireSim Scala main sources
        run: .github/scripts/run-scalafmt-check.py

  run-check-docs-generated-components:
    name: run-check-docs-generated-components
    needs: [setup-manager]
    runs-on: aws-${{ github.run_id }}
    env:
      TERM: xterm-256-color
    steps:
      - uses: actions/checkout@v3
      - name: Check docs components that require manual re-generation (e.g. config_runtime.yaml example, help output)
        run: ./.github/scripts/check-docs-generated-components.py

  build-f1-driver:
    name: build-f1-driver
    needs: [setup-manager]
    runs-on: aws-${{ github.run_id }}
    env:
      TERM: xterm-256-color
    steps:
      - uses: actions/checkout@v3
      - name: Runs compilation of F1 driver for the make-default tuple
        run: ./.github/scripts/build-f1-driver.py

  run-targetutils-scala-tests:
    name: run-targetutils-scala-tests
    needs: [setup-manager]
    runs-on: aws-${{ github.run_id }}
    env:
      TERM: xterm-256-color
    steps:
      - uses: actions/checkout@v3
      - name: Run targetutils scala tests
        run: ./.github/scripts/run-sbt-command.py midasexamples "'project targetutils; test' "

  run-midas-scala-tests:
    name: run-midas-scala-tests
    needs: [setup-manager]
    runs-on: aws-${{ github.run_id }}
    env:
      TERM: xterm-256-color
    steps:
      - uses: actions/checkout@v3
      - name: Run targetutils scala tests
        run: ./.github/scripts/run-sbt-command.py midasexamples "'project midas; test' "

  run-test-groupA:
    name: run-test-groupA
    needs: [build-f1-driver]
    runs-on: aws-${{ github.run_id }}
    env:
      TERM: xterm-256-color
    steps:
      - uses: actions/checkout@v3
      - name: Run CIGroupA Scala tests
        uses: ./.github/actions/run-scala-test
        with:
          test-name: "CIGroupA"

  run-test-groupB:
    name: run-test-groupB
    needs: [run-test-groupA]
    runs-on: aws-${{ github.run_id }}
    env:
      TERM: xterm-256-color
    steps:
      - uses: actions/checkout@v3
      - name: Run CIGroupB Scala tests
        uses: ./.github/actions/run-scala-test
        with:
          test-name: "CIGroupB"

  run-chipyard-tests:
    name: run-chipyard-tests
    needs: [run-test-groupB]
    runs-on: aws-${{ github.run_id }}
    env:
      TERM: xterm-256-color
    steps:
      - uses: actions/checkout@v3
      - name: Run other (CITests) Scala tests
        uses: ./.github/actions/run-scala-test
        with:
          target-project: "firesim"
          test-package: "firesim.firesim"
          test-name: "CITests"

  run-basic-linux-poweroff:
    if: contains(github.event.pull_request.labels.*.name, 'ci:fpga-deploy')
    name: run-basic-linux-poweroff
    needs: [build-default-workloads]
    runs-on: aws-${{ github.run_id }}
    env:
      TERM: xterm-256-color
    steps:
      - uses: actions/checkout@v3
      - name: Run linux-poweroff test w/ AWS EC2 run farm
        run: .github/scripts/run-linux-poweroff.py

  run-basic-linux-poweroff-externally-provisioned:
    if: contains(github.event.pull_request.labels.*.name, 'ci:fpga-deploy')
    name: run-basic-linux-poweroff-externally-provisioned
    needs: [build-default-workloads]
    runs-on: aws-${{ github.run_id }}
    env:
      TERM: xterm-256-color
    steps:
      - uses: actions/checkout@v3
      - name: Run linux-poweroff test w/ externally provisioned (AWS EC2) run farm
        run: .github/scripts/run-linux-poweroff-externally-provisioned.py

# AJG: disable temporarily due to local CI machine issues
#  run-basic-linux-poweroff-vitis:
#    if: contains(github.event.pull_request.labels.*.name, 'ci:fpga-deploy')
#    name: run-basic-linux-poweroff-vitis
#    runs-on: local-fpga
#    env:
#      TERM: xterm-256-color
#    steps:
#      # This forces a fresh clone of the repo during the `checkout` step
#      # to resolve stale submodule URLs. See https://github.com/ucb-bar/chipyard/pull/1156.
#      - name: Delete old checkout
#        run: |
#          rm -rf ${{ github.workspace }}/* || true
#          rm -rf ${{ github.workspace }}/.* || true
#      - uses: actions/checkout@v3
#      - name: Run simple linux poweroff test w/ vitis
#        run: .github/scripts/run-linux-poweroff-vitis.py

  documentation-check:
    name: documentation-check
    needs: change-filters
    runs-on: ubuntu-20.04
    container:
      image: firesim/firesim-ci:v1.3
      options: --entrypoint /bin/bash
      env:
        JVM_MEMORY: 3500M # Default JVM maximum heap limit
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/job-start
        id: job-start
      - name: Check that documentation builds with no warnings/errors
        if: steps.job-start.outputs.run_result != 'success'
        run: |
          sudo yum update -y
          sudo yum install -y python3-pip make
          sudo pip3 install -r docs/requirements.txt
          make -C docs html
      - name: Show error log and dump objects.inv from sphinx if failed
        if: ${{ steps.job-start.outputs.run_result != 'success' && failure() }}
        run: |
          python3 -m sphinx.ext.intersphinx docs/_build/html/objects.inv
          cat /tmp/sphinx-err*.log
      - uses: ./.github/actions/job-end

  clang-format:
    name: clang-format
    runs-on: ubuntu-20.04
    steps:
      # Clone the repository (shallow to save time).
      - name: Checkout sources
        uses: actions/checkout@v3
        with:
          fetch-depth: 2
          submodules: false

      # Install clang-format
      - name: Install clang-format
        run: |
          sudo apt update
          sudo apt install clang-format -y

      # Run 'clang-format', comparing against the base commit hash.
      # If anything got reformatted, fail and output a patch.
      - name: Run clang-format
        run: |
          git fetch --recurse-submodules=no origin ${{ github.base_ref }}
          DIFF_COMMIT=$(git rev-parse origin/${{ github.base_ref }})
          git clang-format $DIFF_COMMIT
          git diff --ignore-submodules > clang-format.patch
          if [ -s clang-format.patch ]; then
            echo "error: clang-format had to fix the following files:"
            git diff --ignore-submodules --name-only
            echo "----- 8< ---- PATCH ----- 8< ----"
            cat clang-format.patch
            echo "----- 8< ---- PATCH ----- 8< ----"
            git checkout .
            exit 1
          fi
