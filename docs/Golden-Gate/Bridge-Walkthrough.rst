Bridge Walkthrough
======================
In this section, we'll walkthrough two simple Target-to-Host bridges provided with FireSim
to demonstrate how to integrate your own. This includes the UARTBridge, which
uses host-MMIO to model a UART device -- this is what you're using when you
attach to a FireSim simulator's console. The second is a walkthrough of the TracerVBridge,
which we use to capture commit logs from the target machine using host-DMA.

Reading the Bridges section is a prerequisite to reading these sections.

UART Bridge (Host-MMIO)
-----------------------

Source code for the UART Bridge lives in the following memory locations:

.. code-block:: text

    sim/
    ├-firesim-lib/src/main/
    │                 ├-scala/bridges/UARTBridge.scala # Target-Side Bridge and BridgeModule Definitions
    │                 ├-cc/brides/uart.cc # Bridge Driver source
    │                 └-cc/brides/uart.h  # Bridge Driver header
    ├-src/main/cc/firesim/firesim_top.cc  # Driver instantiation in the main simulation driver
    └-src/main/makefrag/firesim/Makefrag  # Build system modifications to compile Bridge Driver code

UART Bridge Target-Side Chisel
++++++++++++++++++++++++++++++
The first order of business when designing a new bridge is to implement it's
target-side.  In the case of UART, we've defined a BlackBox extending Bridge.
This is what we'll instantiate this black-box and connect to UART IO in the
top-level of our chip.

We first define a class that captures the target-side interface of the Bridge:

.. literalinclude:: ../../sim/firesim-lib/src/main/scala/bridges/UARTBridge.scala
    :language: scala
    :start-after: DOC include start: UART Bridge Target-Side Interface
    :end-before: DOC include end: UART Bridge Target-Side Interface

Here, we define a case class that carries additional metadata to the host-side
BridgeModule.  For UART, this is simply the clock-division to produce the
baudrate:

.. literalinclude:: ../../sim/firesim-lib/src/main/scala/bridges/UARTBridge.scala
    :language: scala
    :start-after: DOC include start: UART Bridge Constructor Arg
    :end-before: DOC include end: UART Bridge Constructor Arg

Finally, we define the actualy target-side Module:

.. literalinclude:: ../../sim/firesim-lib/src/main/scala/bridges/UARTBridge.scala
    :language: scala
    :start-after: DOC include start: UART Bridge Target-Side Module
    :end-before: DOC include end: UART Bridge Target-Side Module

To make it easier to instantiate our target-side module, we've also defined an
optional Companion object:

.. literalinclude:: ../../sim/firesim-lib/src/main/scala/bridges/UARTBridge.scala
    :language: scala
    :start-after: DOC include start: UART Bridge Companion Object
    :end-before: DOC include end: UART Bridge Companion Object

That completes the target-side definition.

UART Host-Side BridgeModule
++++++++++++++++++++++++++++

The remainder of the file is dedicared to the host-side BridgeModule
definition. Here we have to process tokens generated by the target machine, and
expose a coventient memory-mapped interface to the bridge driver.

Inspecting the top of the class:

.. literalinclude:: ../../sim/firesim-lib/src/main/scala/bridges/UARTBridge.scala
    :language: scala
    :start-after: DOC include start: UART Bridge Header
    :end-before: DOC include end: UART Bridge Header


Much of the remainder of the Module responsible for modeling the timing of the UART.
As a bridge designer, you're free to take as many host-cycles as you need to
process tokens. In simpler models like this one, it's often easiest to write
logic that operates in a single cycle, and simply gate state updates using the
"fire" signal.

Now, we'll skip to the end to see how to add registers to the simulator's memory map
that can be accessed using MMIO from bridge driver.

.. literalinclude:: ../../sim/firesim-lib/src/main/scala/bridges/UARTBridge.scala
    :language: scala
    :start-after: DOC include start: UART Bridge Footer
    :end-before: DOC include end: UART Bridge Footer


UART Bridge Driver
++++++++++++++++++

Adding the BridgeDriver to the Simulator
++++++++++++++++++++++++++++++++++++++++

Build System Modifications
++++++++++++++++++++++++++
